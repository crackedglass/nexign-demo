/*
 * This file is generated by jOOQ.
 */
package ru.crackedglass.nexign_demo.entities.jooq.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import ru.crackedglass.nexign_demo.entities.jooq.tables.Subscribers;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SubscribersRecord extends UpdatableRecordImpl<SubscribersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>SUBSCRIBERS.SUBSCRIBER_ID</code>.
     */
    public void setSubscriberId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>SUBSCRIBERS.SUBSCRIBER_ID</code>.
     */
    public Long getSubscriberId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>SUBSCRIBERS.NUMBER</code>.
     */
    public void setNumber(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>SUBSCRIBERS.NUMBER</code>.
     */
    public String getNumber() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscribersRecord
     */
    public SubscribersRecord() {
        super(Subscribers.SUBSCRIBERS);
    }

    /**
     * Create a detached, initialised SubscribersRecord
     */
    public SubscribersRecord(Long subscriberId, String number) {
        super(Subscribers.SUBSCRIBERS);

        setSubscriberId(subscriberId);
        setNumber(number);
        resetChangedOnNotNull();
    }
}
