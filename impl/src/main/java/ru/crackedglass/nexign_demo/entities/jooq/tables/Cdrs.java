/*
 * This file is generated by jOOQ.
 */
package ru.crackedglass.nexign_demo.entities.jooq.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.crackedglass.nexign_demo.entities.jooq.DefaultSchema;
import ru.crackedglass.nexign_demo.entities.jooq.Keys;
import ru.crackedglass.nexign_demo.entities.jooq.tables.Subscribers.SubscribersPath;
import ru.crackedglass.nexign_demo.entities.jooq.tables.records.CdrsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cdrs extends TableImpl<CdrsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CDRS</code>
     */
    public static final Cdrs CDRS = new Cdrs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CdrsRecord> getRecordType() {
        return CdrsRecord.class;
    }

    /**
     * The column <code>CDRS.CDR_ID</code>.
     */
    public final TableField<CdrsRecord, Long> CDR_ID = createField(DSL.name("CDR_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>CDRS.CALL_TYPE</code>.
     */
    public final TableField<CdrsRecord, String> CALL_TYPE = createField(DSL.name("CALL_TYPE"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>CDRS.CALLER_SUBSCRIBER_ID</code>.
     */
    public final TableField<CdrsRecord, Long> CALLER_SUBSCRIBER_ID = createField(DSL.name("CALLER_SUBSCRIBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CDRS.RECEIVER_SUBSCRIBER_ID</code>.
     */
    public final TableField<CdrsRecord, Long> RECEIVER_SUBSCRIBER_ID = createField(DSL.name("RECEIVER_SUBSCRIBER_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CDRS.START_TIMESTAMP</code>.
     */
    public final TableField<CdrsRecord, Instant> START_TIMESTAMP = createField(DSL.name("START_TIMESTAMP"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>CDRS.END_TIMESTAMP</code>.
     */
    public final TableField<CdrsRecord, Instant> END_TIMESTAMP = createField(DSL.name("END_TIMESTAMP"), SQLDataType.INSTANT.nullable(false), this, "");

    private Cdrs(Name alias, Table<CdrsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cdrs(Name alias, Table<CdrsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>CDRS</code> table reference
     */
    public Cdrs(String alias) {
        this(DSL.name(alias), CDRS);
    }

    /**
     * Create an aliased <code>CDRS</code> table reference
     */
    public Cdrs(Name alias) {
        this(alias, CDRS);
    }

    /**
     * Create a <code>CDRS</code> table reference
     */
    public Cdrs() {
        this(DSL.name("CDRS"), null);
    }

    public <O extends Record> Cdrs(Table<O> path, ForeignKey<O, CdrsRecord> childPath, InverseForeignKey<O, CdrsRecord> parentPath) {
        super(path, childPath, parentPath, CDRS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CdrsPath extends Cdrs implements Path<CdrsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CdrsPath(Table<O> path, ForeignKey<O, CdrsRecord> childPath, InverseForeignKey<O, CdrsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CdrsPath(Name alias, Table<CdrsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CdrsPath as(String alias) {
            return new CdrsPath(DSL.name(alias), this);
        }

        @Override
        public CdrsPath as(Name alias) {
            return new CdrsPath(alias, this);
        }

        @Override
        public CdrsPath as(Table<?> alias) {
            return new CdrsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CdrsRecord, Long> getIdentity() {
        return (Identity<CdrsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CdrsRecord> getPrimaryKey() {
        return Keys.PK_CDRS;
    }

    @Override
    public List<ForeignKey<CdrsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK__CALLER_SUBSCRIBER__CDRS, Keys.FK__RECEIVER_SUBSCRIBER__CDRS);
    }

    private transient SubscribersPath _fk_CallerSubscriber_Cdrs;

    /**
     * Get the implicit join path to the <code>SUBSCRIBERS</code> table, via the
     * <code>FK__CALLER_SUBSCRIBER__CDRS</code> key.
     */
    public SubscribersPath fk_CallerSubscriber_Cdrs() {
        if (_fk_CallerSubscriber_Cdrs == null)
            _fk_CallerSubscriber_Cdrs = new SubscribersPath(this, Keys.FK__CALLER_SUBSCRIBER__CDRS, null);

        return _fk_CallerSubscriber_Cdrs;
    }

    private transient SubscribersPath _fk_ReceiverSubscriber_Cdrs;

    /**
     * Get the implicit join path to the <code>SUBSCRIBERS</code> table, via the
     * <code>FK__RECEIVER_SUBSCRIBER__CDRS</code> key.
     */
    public SubscribersPath fk_ReceiverSubscriber_Cdrs() {
        if (_fk_ReceiverSubscriber_Cdrs == null)
            _fk_ReceiverSubscriber_Cdrs = new SubscribersPath(this, Keys.FK__RECEIVER_SUBSCRIBER__CDRS, null);

        return _fk_ReceiverSubscriber_Cdrs;
    }

    @Override
    public Cdrs as(String alias) {
        return new Cdrs(DSL.name(alias), this);
    }

    @Override
    public Cdrs as(Name alias) {
        return new Cdrs(alias, this);
    }

    @Override
    public Cdrs as(Table<?> alias) {
        return new Cdrs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdrs rename(String name) {
        return new Cdrs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdrs rename(Name name) {
        return new Cdrs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdrs rename(Table<?> name) {
        return new Cdrs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs where(Condition condition) {
        return new Cdrs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdrs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdrs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdrs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdrs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdrs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
