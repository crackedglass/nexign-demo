/*
 * This file is generated by jOOQ.
 */
package ru.crackedglass.nexign_demo.entities.jooq.tables;


import java.time.Instant;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.crackedglass.nexign_demo.entities.jooq.DefaultSchema;
import ru.crackedglass.nexign_demo.entities.jooq.Keys;
import ru.crackedglass.nexign_demo.entities.jooq.tables.records.CdrRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cdr extends TableImpl<CdrRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CDR</code>
     */
    public static final Cdr CDR = new Cdr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CdrRecord> getRecordType() {
        return CdrRecord.class;
    }

    /**
     * The column <code>CDR.CDR_ID</code>.
     */
    public final TableField<CdrRecord, UUID> CDR_ID = createField(DSL.name("CDR_ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<CdrRecord, Object> CALL_TYPE = createField(DSL.name("CALL_TYPE"), DefaultDataType.getDefaultDataType("\"PUBLIC\".\"CDR_CALL_TYPE\"").nullable(false), this, "");

    /**
     * The column <code>CDR.CALLER_NUMBER</code>.
     */
    public final TableField<CdrRecord, String> CALLER_NUMBER = createField(DSL.name("CALLER_NUMBER"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>CDR.RECEIVER_NUMBER</code>.
     */
    public final TableField<CdrRecord, String> RECEIVER_NUMBER = createField(DSL.name("RECEIVER_NUMBER"), SQLDataType.VARCHAR(1000000000).nullable(false), this, "");

    /**
     * The column <code>CDR.START_TIMESTAMP</code>.
     */
    public final TableField<CdrRecord, Instant> START_TIMESTAMP = createField(DSL.name("START_TIMESTAMP"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>CDR.END_TIMESTAMP</code>.
     */
    public final TableField<CdrRecord, Instant> END_TIMESTAMP = createField(DSL.name("END_TIMESTAMP"), SQLDataType.INSTANT.nullable(false), this, "");

    private Cdr(Name alias, Table<CdrRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cdr(Name alias, Table<CdrRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>CDR</code> table reference
     */
    public Cdr(String alias) {
        this(DSL.name(alias), CDR);
    }

    /**
     * Create an aliased <code>CDR</code> table reference
     */
    public Cdr(Name alias) {
        this(alias, CDR);
    }

    /**
     * Create a <code>CDR</code> table reference
     */
    public Cdr() {
        this(DSL.name("CDR"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CdrRecord> getPrimaryKey() {
        return Keys.PK_CDR;
    }

    @Override
    public Cdr as(String alias) {
        return new Cdr(DSL.name(alias), this);
    }

    @Override
    public Cdr as(Name alias) {
        return new Cdr(alias, this);
    }

    @Override
    public Cdr as(Table<?> alias) {
        return new Cdr(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdr rename(String name) {
        return new Cdr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdr rename(Name name) {
        return new Cdr(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cdr rename(Table<?> name) {
        return new Cdr(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr where(Condition condition) {
        return new Cdr(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdr where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdr where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdr where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cdr where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cdr whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
